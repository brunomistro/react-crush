{"version":3,"sources":["components/ScoreBoard.js","images/blue-candy.png","images/green-candy.png","images/orange-candy.png","images/purple-candy.png","images/red-candy.png","images/yellow-candy.png","images/blank.png","App.js","index.js"],"names":["ScoreBoard","score","className","candyColors","blueCandy","orangeCandy","purpleCandy","redCandy","yellowCandy","greenCandy","App","useState","currentColorArrangement","setCurrentColorArrangement","squareBeingDragged","setSquareBeingDragged","squareBeingReplaced","setSquareBeingReplaced","scoreDisplay","setScoreDisplay","checkForColumnOfFour","i","columnOfFour","width","decidedColor","isBlank","blank","every","square","forEach","checkForRowOfFour","rowOfFour","includes","checkForColumnOfThree","columnOfThree","checkForRowOfThree","rowOfThree","moveIntoSquareBelow","randomNumber","Math","floor","random","length","dragStart","e","target","dragDrop","dragEnd","squareBeingDraggedId","parseInt","getAttribute","squareBeingReplacedId","validMove","isAColumnOfFour","isARowOfFour","isAColumnOfThree","isARowOfThree","useEffect","randomColorArrangement","randomColor","push","createBoard","timer","setInterval","clearInterval","map","candyColor","index","src","alt","draggable","onDragStart","onDragOver","preventDefault","onDragEnter","onDragLeave","onDrop","onDragEnd","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9b25e75.chunk.js","sourcesContent":["export default function ScoreBoard({score}) {\r\n\treturn (\r\n\t\t<div className=\"score-board\">\r\n\t\t\t<h2>{score}</h2>\r\n\t\t</div>\r\n\t)\r\n}\r\n","export default __webpack_public_path__ + \"static/media/blue-candy.73120c15.png\";","export default __webpack_public_path__ + \"static/media/green-candy.599f7016.png\";","export default __webpack_public_path__ + \"static/media/orange-candy.f106b2cd.png\";","export default __webpack_public_path__ + \"static/media/purple-candy.ae25b8a5.png\";","export default __webpack_public_path__ + \"static/media/red-candy.3658b37c.png\";","export default __webpack_public_path__ + \"static/media/yellow-candy.a3d87a9b.png\";","export default __webpack_public_path__ + \"static/media/blank.fbcb9179.png\";","import { useEffect, useState } from \"react\";\nimport ScoreBoard from \"./components/ScoreBoard\";\nimport blueCandy from \"./images/blue-candy.png\";\nimport greenCandy from \"./images/green-candy.png\";\nimport orangeCandy from \"./images/orange-candy.png\";\nimport purpleCandy from \"./images/purple-candy.png\";\nimport redCandy from \"./images/red-candy.png\";\nimport yellowCandy from \"./images/yellow-candy.png\";\nimport blank from \"./images/blank.png\";\n\nconst width = 8;\nconst candyColors = [blueCandy, orangeCandy, purpleCandy, redCandy, yellowCandy, greenCandy];\n\nexport default function App() {\n  const [currentColorArrangement, setCurrentColorArrangement] = useState([]);\n  const [squareBeingDragged, setSquareBeingDragged] = useState(null);\n  const [squareBeingReplaced, setSquareBeingReplaced] = useState(null);\n  const [scoreDisplay, setScoreDisplay] = useState(0);\n\n  const checkForColumnOfFour = () => {\n    for (let i = 0; i <= 39; i++) {\n      const columnOfFour = [i, i + width, i + width * 2, i + width * 3];\n      const decidedColor = currentColorArrangement[i];\n      const isBlank = currentColorArrangement[i] === blank;\n\n      if (columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay(score => score + 4);\n        columnOfFour.forEach(square => (currentColorArrangement[square] = blank));\n        return true;\n      }\n    }\n  };\n\n  const checkForRowOfFour = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfFour = [i, i + 1, i + 2, i + 3];\n      const decidedColor = currentColorArrangement[i];\n      const notValid = [\n        5, 6, 7, \n\t\t\t\t13, 14, 15, \n\t\t\t\t21, 22, 23, \n\t\t\t\t29, 30, 31, \n\t\t\t\t37, 38, 39, \n\t\t\t\t45, 46, 47, \n\t\t\t\t53, 54, 55, \n\t\t\t\t62, 63, 64,\n      ];\n      const isBlank = currentColorArrangement[i] === blank;\n      if (notValid.includes(i)) continue;\n\n      if (rowOfFour.every(square =>currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 4);\n        rowOfFour.forEach(square => (currentColorArrangement[square] = blank));\n        return true;\n      }\n    }\n  };\n\n  const checkForColumnOfThree = () => {\n    for (let i = 0; i <= 47; i++) {\n      const columnOfThree = [i, i + width, i + width * 2];\n      const decidedColor = currentColorArrangement[i];\n      const isBlank = currentColorArrangement[i] === blank;\n\n      if (columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 3);\n        columnOfThree.forEach(square => (currentColorArrangement[square] = blank));\n        return true;\n      }\n    }\n  };\n\n  const checkForRowOfThree = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfThree = [i, i + 1, i + 2];\n      const decidedColor = currentColorArrangement[i];\n      const notValid = [\n        6, 7, \n\t\t\t\t14, 15, \n\t\t\t\t22, 23, \n\t\t\t\t30, 31, \n\t\t\t\t38, 39, \n\t\t\t\t46, 47, \n\t\t\t\t54, 55, \n\t\t\t\t63, 64,\n      ];\n      const isBlank = currentColorArrangement[i] === blank;\n      if (notValid.includes(i)) continue;\n\n      if (rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 3);\n        rowOfThree.forEach(square => (currentColorArrangement[square] = blank));\n        return true;\n      }\n    }\n  };\n\n  const moveIntoSquareBelow = () => {\n    for (let i = 0; i <= 55; i++) {\n      const firstRow = [0, 1, 2, 3, 4, 5, 6, 7];\n      const isFirstRow = firstRow.includes(i);\n\n      if (isFirstRow && currentColorArrangement[i] === blank) {\n        let randomNumber = Math.floor(Math.random() * candyColors.length);\n        currentColorArrangement[i] = candyColors[randomNumber];\n      }\n\n      if (currentColorArrangement[i + width] === blank) {\n        currentColorArrangement[i + width] = currentColorArrangement[i];\n        currentColorArrangement[i] = blank;\n      }\n    }\n  };\n\n  const dragStart = (e) => {\n    setSquareBeingDragged(e.target);\n  };\n\n  const dragDrop = (e) => {\n    setSquareBeingReplaced(e.target);\n  };\n\n  const dragEnd = () => {\n    const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute(\"data-id\"));\n    const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute(\"data-id\"));\n\n    currentColorArrangement[squareBeingReplacedId] = squareBeingDragged.getAttribute(\"src\");\n    currentColorArrangement[squareBeingDraggedId] = squareBeingReplaced.getAttribute(\"src\");\n\n    const validMoves = [\n      squareBeingDraggedId - 1,\n      squareBeingDraggedId - width,\n      squareBeingDraggedId + 1,\n      squareBeingDraggedId + width,\n    ];\n    const validMove = validMoves.includes(squareBeingReplacedId);\n\n    const isAColumnOfFour = checkForColumnOfFour();\n    const isARowOfFour = checkForRowOfFour();\n    const isAColumnOfThree = checkForColumnOfThree();\n    const isARowOfThree = checkForRowOfThree();\n\n    if (\n      squareBeingReplacedId &&\n      validMove &&\n      (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnOfThree))\n\t\t{\n      setSquareBeingDragged(null);\n      setSquareBeingReplaced(null);\n    } \n\t\telse {\n      currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute(\"src\");\n      currentColorArrangement[squareBeingDraggedId] = squareBeingDragged.getAttribute(\"src\");\n      setCurrentColorArrangement([...currentColorArrangement]);\n    }\n  };\n\n  const createBoard = () => {\n    const randomColorArrangement = [];\n    for (let i = 0; i < width * width; i++) {\n      const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)];\n      randomColorArrangement.push(randomColor);\n    }\n    setCurrentColorArrangement(randomColorArrangement);\n  };\n\n  useEffect(() => {createBoard();}, []);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      checkForColumnOfFour();\n      checkForRowOfFour();\n      checkForColumnOfThree();\n      checkForRowOfThree();\n      moveIntoSquareBelow();\n      setCurrentColorArrangement([...currentColorArrangement]);\n    }, 100);\n    return () => clearInterval(timer);\n  }, [\n    checkForColumnOfFour,\n    checkForRowOfFour,\n    checkForColumnOfThree,\n    checkForRowOfThree,\n    moveIntoSquareBelow,\n  ]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"game\">\n        {currentColorArrangement.map((candyColor, index) => (\n          <img\n            key={index}\n            src={candyColor}\n            alt={candyColor}\n            data-id={index}\n            draggable={true}\n            onDragStart={dragStart}\n            onDragOver={(e) => e.preventDefault()}\n            onDragEnter={(e) => e.preventDefault()}\n            onDragLeave={(e) => e.preventDefault()}\n            onDrop={dragDrop}\n            onDragEnd={dragEnd}\n          />\n        ))}\n      </div>\n      <ScoreBoard score={scoreDisplay} />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<React.StrictMode><App/></React.StrictMode>, document.getElementById('root'));"],"sourceRoot":""}